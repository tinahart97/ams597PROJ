install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)

setwd("parent_directory")
create("PoolMeta")

#' Pooling Data
#'
#'This function uses different tests to pool data
#' @param x is a list of p values

#' @return A list containing the following components
#' @return \code{statistic} the value of the corrected Z-test statistic.
#' @return \code{p.value} the p-value for the test.
#'
#' @examples
#' set.seed(123)
#' p <- 100
#' data1 <- data.frame(group=sample(1:3,200,replace=TRUE),matrix(rnorm(p*200),ncol=p))
#' data2 <- data.frame(group=sample(1:2,150,replace=TRUE),matrix(rnorm(p*150),ncol=p))
#' data3 <- data.frame(group=sample(1:2,220,replace=TRUE),matrix(rnorm(p*220),ncol=p))


set.seed(123)
p <- 100
data1 <- data.frame(group=sample(1:3,200,replace=TRUE),matrix(rnorm(p*200),ncol=p))
data2 <- data.frame(group=sample(1:2,150,replace=TRUE),matrix(rnorm(p*150),ncol=p))
data1
data2


Project = function(x1,x2,x3=NULL,x4=NULL,x5=NULL,test=c("fisher","stouffer","min","max")){
  
  #check if enough data freames were entered
  if(is.null(x1) | is.null(x2)){
    stop("Not enough data frames entered")
  }
  
  #get the p_value lists for each biomarker for each data frame
  P_x1 = NULL
  P_x2 = NULL
  P_x3 = NULL
  P_x4 = NULL
  P_x5 = NULL
  

  
  if (!is.null(x1)){
    P_x1 = GroupDifference(x1) 
  }
  if (!is.null(x2)){
    P_x2 = GroupDifference(x2)
  }
  if (!is.null(x3)){
    P_x3 = GroupDifference(x3)
  }
  if (!is.null(x4)){
    P_x4 = GroupDifference(x4)
  }
  if (!is.null(x5)){
    P_x5 = GroupDifference(x5)
  }
  
  data = rbind(P_x1,P_x2,P_x3,P_x4,P_x5)
  #or colbind bc we have no clue what you want
  data = data.frame(data)
  
  #initiate the p values we want to find
  if(test == "fisher"){
    x = sapply(data, pool.fisher)
  }
  else if(test == "stouffer"){
    x = sapply(data, pool.stouffer)
  }
  else if(test == "min"){
    x = sapply(data, pool.min)
  }
  else if(test == "max"){
    x = sapply(data, pool.max)
  }
  print(x)

  
  #Stouffer Statistic
  
}


Project(data1,data2,test="max")



pool.fisher <- function(pvalues){
  k <- length(pvalues)
  df <- 2*k
  TS <- -2*sum(log(pvalues))
  p.value <- pchisq(TS, df=df,lower.tail=F)
  return(p.value)
}
pool.stouffer <- function(pvalues){
  k <- length(pvalues)
  TS <- sum(qnorm(pvalues)) / sqrt(k)
  p.value <- pnorm(TS, lower.tail=F)
  return(p.value)
}
pool.min <- function(pvalues){
  k <- length(pvalues)
  TS <- min(pvalues)
  p.value <- pbeta(TS, shape1=1, shape2=k, lower.tail=F)
  return(p.value)
}
pool.max <- function(pvalues){
  k <- length(pvalues)
  TS <- max(pvalues)
  p.value <- pbeta(TS, shape1=k, shape2=1, lower.tail=F)
  return(p.value)
}



GroupDifference = function(x){
  p = length(x)
  n = length(x[,1])
  groups = nrow(unique(x[1]))
  p_values = rep(NA,p-1)
  #ANOVA Code
  if(groups>2){  
    #test normality
    for(i in 2:p){
      y = data.frame(group = x[,1], biomarker = x[,i])
      normal = TRUE
      for(j in 1:groups){
        y_j = y[which(y$group==j),][,2]
        pvalue = shapiro.test(y_j)[[2]]
        if(pvalue<=.05){
          normal=FALSE
          break
        }
      }
      
      #for normal
      if(normal){
        fit = lm(y$group~y$biomarker)
        pvalue = anova(fit)[,5][1]
      }
      
      #for not normal
      else{
        pvalue = kruskal.test(y$group~y$biomarker)[3]$p.value
      }
      p_values[i-1] = pvalue
    }
    return(p_values)
  }
  #Two Samp T Test Code
  else{
    for(i in 2:p){
      y = data.frame(group = x[,1], biomarker = x[,i])
      y1 = y[which(y$group==1),][,2]
      y2 = y[which(y$group==2),][,2]
      
      #check for normal
      norm_p_y1 = shapiro.test(y1)$p
      norm_p_y2 = shapiro.test(y2)$p
      #for normal
      if(norm_p_y1>.05 & norm_p_y2>.05){
        var_p = var.test(y1,y2)[3]$p.value
        #equal variance
        if(var_p>.05){
          pvalue = t.test(y1,y2,var.equal = T)[3]$p.value
        }
        #unequal variance
        else{
          pvalue = t.test(y1,y2,var.equal = F)[3]$p.value
        }
      }
      
      #for not normal
      else{
        pvalue = wilcox.test(y1,y2)[3]$p.value
      }
      p_values[i-1] = pvalue
    }
  }
  return(p_values)
}


