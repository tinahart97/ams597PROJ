install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)

#' Pooled test
#'
#' @param data1, data2, data3, data4, data5 are all data.frames
#' @param Each data frame consists of identical number of columns
#' @param Each data frame will have n number of rows, n can be different for different data frames
#' @param 
#'
#' @return A list containing the following components
#' @return \code{statistic} the value of the corrected Z-test statistic.
#' @return \code{p.value} the p-value for the test.
#'
#' @examples
#' set.seed(123)
#' p <- 100
#' data1 <- data.frame(group=sample(1:3,200,replace=TRUE),matrix(rnorm(p*200),ncol=p))
#' data2 <- data.frame(group=sample(1:2,150,replace=TRUE),matrix(rnorm(p*150),ncol=p))
#' data3 <- data.frame(group=sample(1:2,220,replace=TRUE),matrix(rnorm(p*220),ncol=p))



check.input <- function(frames){
  # frames: list
  n_cols <- ncol(frames[1])
  col_labels <- colnames(frames[1])
  
  for (f in frames){
    # Check that a list of data frames are being entered.
    if (typeof(f) != "list"){
      stop("list contains elements not of type list")
    }
    
    # Check that number of columns are the same.
    n_c <- ncol(f)
    if (n_c != n_cols){
      stop("not all data frames have the same number of columns")
    }
    
    # Check that all column names are the same.
    if (any(colnames(f) != col_labels)){
      stop("there exists a column with an incorrect label")
    }
  }
}

frames <- list(data1, data2)
check.input(frames)


GroupDifference <- function(x){
  p = length(x)
  n = length(x[,1])
  groups = nrow(data1[1])
  p_values = rep(NA,p-1)
  #ANOVA Code
  if(groups>2){  
    #test normality
    for(i in 2:p-1){
      y = data.frame(group = x[,1], biomarker = x[,i])
      normal = TRUE
      for(j in 1:groups){
        y_j = y[which(y$group==j),][,2]
        pvalue = shapiro.test(y_j)[3]$p.value
        if(pvalue<=.05){
          normal=FALSE
          break
        }
      }
      
      #for normal
      if(normal){
        fit = lm(y$group~y$biomarker)
        pvalue = anova(fit)[,5][1]
      }
      
      #for not normal
      else{
        pvalue = kruskal.test(y$group~y$biomarker)[3]$p.value
      }
      pvalues[i-1] = pvalue
    }
    return(pvalues)
  }
  #Two Samp T Test Code
  else{
    for(i in 2:p){
      y = data.frame(group = x[,1], biomarker = x[,i])
      y1 = y[which(y$group==1),][,2]
      y2 = y[which(y$group==2),][,2]
      
      #check for normal
      norm_p_y1 = shapiro.test(y1)$p
      norm_p_y2 = shapiro.test(y2)$p
      #for normal
      if(norm_p_y1>.05 & norm_p_y2>.05){
        var_p = var.test(y1,y2)[3]$p.value
        #equal variance
        if(var_p>.05){
          pvalue = t.test(y1,y2,var.equal = T)[3]$p.value
        }
        #unequal variance
        else{
          pvalue = t.test(y1,y2,var.equal = F)[3]$p.value
        }
      }
      
      #for not normal
      else{
        pvalue = wilcox.test(y1,y2)[3]$p.value
      }
      p_values[i-1] = pvalue
    }
  }
  return(p_values)
}
